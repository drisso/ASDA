[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advanced Statistics and Data Analysis",
    "section": "",
    "text": "Introduction\nThis is the companion website of the “Advanced Statistics and Data Analysis” course, taught within the “Quantitative and Computational Biosciences” Master’s program at the University of Padova.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#organization-of-this-website",
    "href": "index.html#organization-of-this-website",
    "title": "Advanced Statistics and Data Analysis",
    "section": "Organization of this website",
    "text": "Organization of this website\nThis website is organized as a book. Each class topic is treated in a different chapter.\nIn each Chapter, you will find the slides presented in class and the code used for the practicals.\nYou can use the navigation bar to navigate by topic or the Timeline section below to see the topics in the same order they were presented in class.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#timeline",
    "href": "index.html#timeline",
    "title": "Advanced Statistics and Data Analysis",
    "section": "Timeline",
    "text": "Timeline\n\n\n\nDate\nTopic\nType\n\n\n\n\n24/2/2025\nIntro to course and statistics recap\nLecture\n\n\n24/2/2025\nThe Normal Linear Model (part 1)\nLecture\n\n\n…",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#suggested-reading-materials",
    "href": "index.html#suggested-reading-materials",
    "title": "Advanced Statistics and Data Analysis",
    "section": "Suggested reading materials",
    "text": "Suggested reading materials\n\nR resources\n\nR for Data Science book\nTidyverse Skills for Data Science in R\nThe ggplot2 book\nHappy Git with R\nAdvanced R\n\n\n\nStatistics\n\nModern Statistics for Modern Biology",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#work-in-progress",
    "href": "index.html#work-in-progress",
    "title": "Advanced Statistics and Data Analysis",
    "section": "Work in progress",
    "text": "Work in progress\nThe book is a work in progress as we move through the first edition of this class. Please, open issues and contribute pull requests at https://github.com/drisso/ASDA if you find typos or mistakes or if something is missing.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#acknowledgments",
    "href": "index.html#acknowledgments",
    "title": "Advanced Statistics and Data Analysis",
    "section": "Acknowledgments",
    "text": "Acknowledgments\nI wish to warmly thank all the authors that have provided open resources related to the topics of this course. In particular, Claus O. Wilke, Carrie Wright, Shannon E. Ellis, Stephanie C. Hicks, Roger D. Peng, Wolfgang Huber, Susan Holmes, Hadley Wickham.\nIn the same spirit, I am sharing openly online this course.\nSpecific resources that can be used as additional readings are noted in the relevant chapter.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Course Introduction",
    "section": "",
    "text": "1.1 Lecture Slides\nView slides in full screen",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#exercises",
    "href": "intro.html#exercises",
    "title": "1  Course Introduction",
    "section": "1.2 Exercises",
    "text": "1.2 Exercises\n\nCreate a scatter-plot of petal length and petal width\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCalculate the correlation between these two variables\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nCalculate the correlation only for the setosa species\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nFit a linear model using petal width as a response variable and petal length and species as covariates\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#a-look-ahead",
    "href": "intro.html#a-look-ahead",
    "title": "1  Course Introduction",
    "section": "1.3 A look ahead",
    "text": "1.3 A look ahead\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course Introduction</span>"
    ]
  },
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "2  Data Visualization",
    "section": "",
    "text": "2.1 Lecture Slides\nView slides in full screen",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#lab-data-wrangling-and-visualization",
    "href": "dataviz.html#lab-data-wrangling-and-visualization",
    "title": "2  Data Visualization",
    "section": "2.2 Lab: data wrangling and visualization",
    "text": "2.2 Lab: data wrangling and visualization\n\n2.2.1 What’s not covered (i.e., prerequisites)\nBasic R syntax is not covered in this lab, as we assume that you are already familiar with it. Most of the concepts in this first lab should be accessible to peolple with minimal exposure to R (Googling what you don’t remember is allowed – and encouraged!).\nIf you need help getting started with R, this is a good and free tutorial: https://swcarpentry.github.io/r-novice-gapminder/\n\n\n2.2.2 What’s covered (i.e., outline)\nIn this first lab, we will cover how to:\n\nhow to transform, group, and summarize tidy data with the dplyr package\nhow to plot tidy data with the ggplot2 package\n\nNote that this process is sometimes referred to as data wrangling (or data munging). To do this we will make extensive use of the dplyr package.\nThis is not a complete tutorial of the dplyr package. Rather, it’s an introduction of the dplyr syntax.\n\n\n2.2.3 Data wrangling: the dplyr package\nAn important and often time consuming step of any data analysis is “data wrangling,” or the process of cleaning up the dataset. This process is often required before any meaningful data exploration can be carried out.\nAlthough it is possible to plot, analyze and even make inference with messy datasets, you will make your life much easier by cleaning and “tidying” your data as a preliminary step and by saving a cleaned dataset as the starting point of the downstream analyses can save you quite some time in the long run.\nThis often requires removing, adding, transforming variables, as well as filtering, grouping, and ordering observations. Data summary is also often included in the data wrangling definition.\nAlthough base R has all the tools needed to perform these operations, the dplyr add-on package has a nice and concise set of operations that make it easier to perform the typical operations needed at this step.\n\n\n2.2.4 An example dataset: the gapminder package\nTo illustrate the concepts in this lab, we will use the gapminder package, which includes a subset of the Gapminder dataset with data on 142 countries per capita GDP (Gross Domestic Product) and life expectancy between 1952 and 2007.\nThe package is available on CRAN and can be downloaded with the following.\n\ninstall.packages(\"gapminder\")\n\nThis is the way to install packages in R. For this lab we will need the dplyr, tidyr, magrittr, and ggplot2 packages. Although we can install these packages independently, a convenient alternative is to install the tidyverse package.\n\ninstall.packages(\"tidyverse\")\n\nYou will need to install the packages only once, but the packages need to be loaded into R at every new session.\n\nlibrary(tidyverse)\nlibrary(gapminder)\n\nAfter loading the package, we can have a look at the dataset.\n\ngapminder\n\n# A tibble: 1,704 × 6\n   country     continent  year lifeExp      pop gdpPercap\n   &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n 1 Afghanistan Asia       1952    28.8  8425333      779.\n 2 Afghanistan Asia       1957    30.3  9240934      821.\n 3 Afghanistan Asia       1962    32.0 10267083      853.\n 4 Afghanistan Asia       1967    34.0 11537966      836.\n 5 Afghanistan Asia       1972    36.1 13079460      740.\n 6 Afghanistan Asia       1977    38.4 14880372      786.\n 7 Afghanistan Asia       1982    39.9 12881816      978.\n 8 Afghanistan Asia       1987    40.8 13867957      852.\n 9 Afghanistan Asia       1992    41.7 16317921      649.\n10 Afghanistan Asia       1997    41.8 22227415      635.\n# ℹ 1,694 more rows\n\n\nNote that this is a tibble, which is a fancy extension of a data.frame.\n\nclass(gapminder)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nOther than having a better method to print to screen, a tibble is a data.frame and in this course we will use the term data.frame whether the object is a tibble or a data.frame.\n\n\n2.2.5 The “pipe” operator\nBefore discussing the main “verbs” available in the dplyr package, we introduce the “pipe” operator. The pipe operator, |&gt;, essentially takes the output of the left-hand side expression and turns it into the first argument of the right-hand side function.\nLet’s consider an example. Assume that we want to know the sum of the first 100 natural numbers. We can first create a vector with the numbers, saving it into a variable, and then compute the sum.\n\nx &lt;- 1:100\nsum(x)\n\n[1] 5050\n\n\nAlternatively, we can generate the vector and directly call the function by nesting the two expressions.\n\nsum(1:100)\n\n[1] 5050\n\n\nThe pipe operator gives yet another alternative.\n\n1:100 |&gt; sum()\n\n[1] 5050\n\n\nAlthough this syntax may seem overly complicated for such small examples, it’s extremely useful when many functions are applied in a sequential way, to avoid the nesting of functions that may create hard to read code.\n\n## nested functions\nplot(density(rnorm(mean(rnorm(1, mean=10)))))\n\n\n\n\n\n\n\n## pipe\nrnorm(1, mean=10) |&gt;\n  mean() |&gt;\n  rnorm() |&gt;\n  density() |&gt;\n  plot()\n\n\n\n\n\n\n\n\n\n\n2.2.6 dplyr verbs\nThe five key functions of the dplyr package are the following.\n\nselect(): to select variables, or columns of the data frame.\nfilter(): to select obserations, or rows of the data frame.\narrange(): to order the observations.\nmutate(): to modify a variable or create a new one.\nsummarize(): to summarize the values of a variable.\n\nAnother important function is group_by(), which changes the behavior of the other five functions to operate at the group level rather than on the full dataset.\nWe will illustrate the five verbs by trying to answer a few interesting questions with the gapminder dataset:\n\nWhat were the 5 richest countries in Europe in 1997?\nWhat was the total GDP of Japan in 1962?\nWhat was the average life expectancy for each continent in 2007?\nHow did the average life expectancy of each continent change each year between 1962 and 1997?\n\n\n2.2.6.1 Five richest European countries in 1997\nTo answer this question we need to:\n\nSelect the observations corresponding to European countries in the year 1997;\nselect the variables related to gdp and country;\norder the countries by gdp.\n\n\ngapminder |&gt;\n  filter(continent == \"Europe\") |&gt;\n  filter(year == 1997) |&gt;\n  dplyr::select(country, gdpPercap) |&gt;\n  arrange(desc(gdpPercap)) |&gt;\n  head(n=5)\n\n# A tibble: 5 × 2\n  country     gdpPercap\n  &lt;fct&gt;           &lt;dbl&gt;\n1 Norway         41283.\n2 Switzerland    32135.\n3 Netherlands    30246.\n4 Denmark        29804.\n5 Austria        29096.\n\n\n\n\n2.2.6.2 Total GDP of Japan in 1962\nTo answer this question we need to:\n\nSelect the observations corresponding to Japan in the year 1962;\nmultiply per capita GDP by total population.\n\n\ngapminder |&gt;\n  filter(country == \"Japan\" & year == 1962) |&gt;\n  mutate(totalGDP = gdpPercap * pop) |&gt;\n  pull(totalGDP)\n\n[1] 630251873021\n\n\n\n\n2.2.6.3 Average life expectancy for each continent in 2007\nTo answer this question we need to:\n\nSelect the observations corresponding to the year 2007;\ngroup the data by continent;\ncompute the average.\n\n\ngapminder |&gt;\n  filter(year == 2007) |&gt;\n  group_by(continent) |&gt;\n  summarize(averageExp = mean(lifeExp))\n\n# A tibble: 5 × 2\n  continent averageExp\n  &lt;fct&gt;          &lt;dbl&gt;\n1 Africa          54.8\n2 Americas        73.6\n3 Asia            70.7\n4 Europe          77.6\n5 Oceania         80.7\n\n\n\n\n2.2.6.4 Life expectancy per continent 1962-1997\n\ngapminder |&gt;\n  filter(year &gt;= 1962 & year &lt;= 1997) |&gt;\n  group_by(continent, year) |&gt;\n  summarize(averageExp = mean(lifeExp))\n\n# A tibble: 40 × 3\n# Groups:   continent [5]\n   continent  year averageExp\n   &lt;fct&gt;     &lt;int&gt;      &lt;dbl&gt;\n 1 Africa     1962       43.3\n 2 Africa     1967       45.3\n 3 Africa     1972       47.5\n 4 Africa     1977       49.6\n 5 Africa     1982       51.6\n 6 Africa     1987       53.3\n 7 Africa     1992       53.6\n 8 Africa     1997       53.6\n 9 Americas   1962       58.4\n10 Americas   1967       60.4\n# ℹ 30 more rows\n\n\nThis is too much information to see on the screen. We will see in the next session how to visualize the data in a plot.\nSome other useful functions defined in the dplyr package are the following.\n\nslice: select rows by position.\ncase_when and ifelse for conditional operators.\ntransmute: a mutate that drops existing variables.\ndo: perform arbitrary operations.\n\n\n\n\n2.2.7 Plotting tidy data: the ggplot2 package\nAlthough base R has a plotting system, there are addon packages that define other plotting functions. One of them is the ggplot2 package. ggplot2 defines a “grammar of graphics” as a consistent way to create very different plots.\nIn my real analysis I use a mix of base graphics and ggplot2 as I find that both systems have pros and cons and each is more appropriate for certain types of data and/or plots. Here, we assume that you are already familiar with base graphics, or that you can learn it on your own, and we focus on ggplot2.\nLet’s start from the last example of the previous section. We want to explore the trends in life expectancy for each continent over the years. We can use group_by and summarize to compute the average life expectancy per each continent between 1962 and 2007. But how can we visualize it? Here is where the ggplot2 package comes into play.\n\ngapminder |&gt;\n  group_by(continent, year) |&gt;\n  summarize(averageExp = mean(lifeExp)) |&gt;\n  ggplot(aes(x = year, y = averageExp, group=continent,\n             color=continent)) +\n  geom_line()\n\n\n\n\n\n\n\n\nThe ggplot function has two main arguments:\n\na dataset that contains the data (in the example above passed with the pipe operator);\nan “aesthetic mapping” created by the aes() function.\n\nNote that in addition to specifying the x and y axis, we also specified a grouping variable and a variable that defines the color of the lines.\nHere, we plotted the data for the continent in the same plot with different colors. This is fine when plotting a few lines, but what if we wanted to plot the data for each country rather than each continent? A simple modification to our code let us do just that.\n\ntheme_set(theme_minimal())\n\ngapminder |&gt;\n  ggplot(aes(x = year, y = lifeExp, group=country,\n             color=continent)) +\n  geom_line()\n\n\n\n\n\n\n\n\nThis is not great because of overplotting. In this situations, a popular device is the use of facets.\n\ngapminder |&gt;\n  ggplot(aes(x = year, y = lifeExp, group=country,\n             color=continent)) +\n  geom_line() +\n  facet_wrap(~continent, nrow = 2)\n\n\n\n\n\n\n\n\nThis plot can be further improved by plotting only the average curve and the range for each continent.\n\ngapminder |&gt;\n  group_by(continent, year) |&gt;\n  summarize(averageExp = mean(lifeExp), \n            minExp = min(lifeExp),\n            maxExp = max(lifeExp)) |&gt;\n  ggplot(aes(x = year, y = averageExp, group=continent,\n             fill=continent)) +\n  geom_ribbon(aes(ymin = minExp, ymax = maxExp, alpha = 0.5)) +\n  geom_line() + theme(legend.position=\"none\") +\n  facet_wrap(~continent, nrow = 2)\n\n\n\n\n\n\n\n\nLet’s say that we are interested in the relation between life expectancy and GDP. Let’s have a look at the first available year, 1962. The best way to visualize the data to answer this question is with a scatterplot, available in ggplot2 via the geom_point.\n\ngapminder |&gt;\n  filter(year == 1962) |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point()\n\n\n\n\n\n\n\n\nThis is not a very satisfying plot. The data looks better if we plot the x axis on the log scale.\n\ngapminder |&gt;\n  filter(year == 1962) |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point() + scale_x_log10()\n\n\n\n\n\n\n\n\nTo extract more information from this analysis, we can also color the points by continent and have the size of the point proportional to the country’s population.\n\ngapminder |&gt;\n  filter(year == 1962) |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp, color=continent, size=pop)) +\n  geom_point() + scale_x_log10()\n\n\n\n\n\n\n\n\nAnalogously, we can change the shape and transparency of the points with the parameters shape and alpha.\nHere we have seen three geometries, the line, the point, and the “ribbon”. Other useful geometries are geom_boxplot, geom_histogram, geom_density, etc. See the cheat sheet for all the geometries.\nThe last version of the plot is very close to an optimal representation of the data. This graphical summary raises some interesting questions, e.g., what is the country that sits by itself on the right-hand side of the plot? This is by far the richest country per capita, but its life expectancy is not very high.\nOne solution is to add labels.\n\nlibrary(ggrepel)\ngapminder |&gt;\n  filter(year == 1962) |&gt;\n  ggplot(aes(x = gdpPercap, y = lifeExp, color=continent, label=country)) +\n    geom_point(aes(size = pop)) +\n    geom_label_repel() + scale_x_log10()\n\n\n\n\n\n\n\n\nThis is a great plot for 1962, but how do things change across the years? We could use facets to display a few years, but if we are going to explore all years, we need a dynamic plot.\n\nlibrary(gganimate)\ngap &lt;- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  scale_x_log10() +\n  facet_wrap(~continent, ncol = 5) +\n  # animate it!\n  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +\n  transition_time(year) +\n  theme_bw()\n\ngap",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dataviz.html#further-reading",
    "href": "dataviz.html#further-reading",
    "title": "2  Data Visualization",
    "section": "2.3 Further reading",
    "text": "2.3 Further reading\n\nClaus O. Wilke. Fundamentals of Data Visualization\nS. Holmes and W. Huber. Modern Statistics for Modern Biology. Chapter 3\nCarrie Wright, Shannon E. Ellis, Stephanie C. Hicks and Roger D. Peng Tidyverse Skills for Data Science",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  }
]