---
title: "Tools for Reproducible Research"
subtitle: "Advanced Statistics and Data Analysis"
author: "Davide Risso"
format: 
    revealjs:
        theme: default
        incremental: true
execute:
    echo: true
---

## Introduction

One of my personal goals for this course is to convince you of how important the concept of **reproducible research** is.

This is a fundamental topic in modern statistics and data science, and it is particularly important when dealing with large and complex data, such as those we find in computational biology. 

Here I will illustrate some practical tools that we can use to ensure _reproducibility of the results_.

## Motivation

::: {.callout-important}
# From a collaborator:

Davide,

Please find attached the updated data.

It would be best to re-run the whole analysis to update the figures for the manusctipt.

Best,

Your lovely collaborator

:::

## Motivation

[Why Most Published Research Findings Are False
](https://journals.plos.org/plosmedicine/article?id=10.1371/journal.pmed.0020124)

[The Statistical Crisis in Science](https://www.americanscientist.org/article/the-statistical-crisis-in-science)

## What is "reproducible reasearch"?

::: {.callout-important}

A data analsyis is reproducible if, starting from the raw data and the code used to analyze them, another analyst can _reproduce_ the results of the original analysis.

:::

## Reproducible vs. Replicable

A study is **reproducible** if starting from the _same data_ we arrive at the _same results_.

A study is **replicable** if starting from _new, independent data_ we arrive at the _same conclusions_.

::: {.callout-warning}
Reproducibility does not imply correctness!
:::

## Why reproducibility?

- Replicability is one of the core concepts of science.
- In many scientific fields (including biology), a discovery is confirmed only after an independent research team is able to reproduce the results.
- As data analysts we cannot guarantee the study correctness or replicability.
- The only thing we can guarantee is its reproducibility: using my data and my code, you get my results.
- Think about it as a low bar of scientific best practice.

## Why reproducibility?

- Andrew Gelman described the many choices that an analyst can make as a
"garden of forking paths"
- For instance, we have freedom to choose the model, which variables to include, whether to remove outliers, ...
- With complex data, we cannot "look" at all the data at once, it is hard to reason in high dimensions.
- We have to trust the process of data analysis.

## Why reproducibility?

- Very often biostatisticians and bioinformaticians that want to replicate the analysis of a study need to make a great effort in understanding _exactly_ what is described in the methods section of a paper.
- Keith Baggerly called this **forensic bioinformatics**.
- The goal of reproducible research is to make this process automatic.

## Examples

[The STAP cell controversy](https://www.nature.com/articles/nature.2015.18412)

[The Duke Saga](https://www.nytimes.com/2011/07/08/health/research/08genes.html)

[The pizza papers](https://www.buzzfeednews.com/article/stephaniemlee/brian-wansink-cornell-p-hacking)

[The Santa Clara County COVID study](https://www.tandfonline.com/doi/full/10.1080/09332480.2020.1820254#d1e135)

## Basic principles of reproducibility

- Everything via code
- Everything automated
    - Workflow and dependencies clearly documented
- Get the data in the most-raw form possible
- Get any/all data and meta-data possible
- Keep track of the provenance of all data files
- Be self-sufficient

Source: Karl Broman [Tools for reproducible research](http://kbroman.org/Tools4RR)

## Basic tools

- knitr / R markdown / Quarto

- Git / version control

- Docker

## What not to do

- Open a data file to do even a slight edit
- Paste results into the text of a manuscript
- Copy-paste-edit tables
- Copy-paste-adjust figures
- Copy-paste code
    - loops $<$ functions $<$ packages

Source: Karl Broman [Tools for reproducible research](http://kbroman.org/Tools4RR)

# Literate programming

## Literate programming

- Literate programming was introduced by Donald Knuth as a way to weave together programming and natural language.

- The idea is that the natural language explanation and the program itself live in the same document.

## Knuth's _Literate Programming_ (1983)

- "I believe that the time is ripe for significantly better documentation of programs, and that we can best achieve this by considering programs to be works of literature."


- "Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do."


## R and literate programming

R has a long history of supporting literate programming.

_knitr_, its predecessor _Sweave_, and _rmarkdown_, are three packages that make it possible.

Lately, _Quarto_ has been developed as a language-agnostic alternative, able to combine R and Python with _markdown_ to produce html and pdf documents.

Quarto can be used for websites, books, and more.

## An example

::: {.r-fit-text}
[This course is made in Quarto](https://github.com/drisso/ASDA)
:::

## What is markdown?

Markdown is a mark-up language, very easy to write and human readable.

It's easy to create lists, italic, bold text, e.g.:

```
- One
- _Two_
- __Three__
```

Renders as

- One
- _Two_
- __Three__

[Markdown basics](https://quarto.org/docs/authoring/markdown-basics.html)


## What about code?

Code "chunks" can be included with the following syntax.

```{{r}}
alpha <- 1
beta <- 2
x <- rnorm(10)
y <- alpha + beta * x
print(y)
```

## What about code?

Depending on the options, we can decide to show the code or not, and to execute it or not, printing outputs and even figures.

```{r}
alpha <- 1
beta <- 2
x <- rnorm(10)
y <- alpha + beta * x
print(y)
```

## What about code?

Depending on the options, we can decide to show the code or not, and to execute it or not, printing outputs and even figures.

```{r}
alpha <- 1
beta <- 2
x <- rnorm(10)
y <- alpha + beta * x
plot(x, y)
```

## Global options (YAML)

YAML is a human-readable language that can be used to include options at the beginning of your documents.

```{yml}
---
title: "Tools for Reproducible Research"
subtitle: "Advanced Statistics and Data Analysis"
author: "Davide Risso"
format: revealjs
execute:
    echo: true
---

```

# Version Control (git)

## Motivation

![](http://www.phdcomics.com/comics/archive/phd101212s.gif){fig-align="center"}

## Version control

There are essentially three possibilities when you work on a long project (think about your thesis!).

1. Use one version of the file.
2. Save each time a new version to a new file.
3. Use a "version control" system.

## Version control

- Obviously 2 is better than 1!

- But what happens if something goes wrong and you need to find (quickly) the last working version?

- What happens if you send a version to your collaborator and then keep working on the file?


## Advantages of version control

- The whole history of changes is saved
- You can easily revert back to a previous version
- If two people edit the same file at the same time, you can "merge" the two versions
- You have automatic backups!

## An example

::: {.r-fit-text}
[This course uses git](https://github.com/drisso/ASDA)
:::

## Git

- Git is a version control system developed by Linus Torvalds to work on the Linux project.

- It tracks all file types, but not ideal for binary or proprietary files.

- It's integrated in R Studio and is freely available as an open source software.

- Free websites offer it as a service (Github, Gitlab, ...)

## To learn Git

::: {.r-fit-text}

[Happy git with R](https://happygitwithr.com/])

:::

# Docker Containers

## Motivation

- Even though we may be sure that we know what a script does (because we have documented it with Quarto) ...
- ... and we are sure we are using the right version of the code (because we are using git) ...
- ... the results could still change in between two runs of the code.

. . .

::: {.callout-important}
How come?
:::

## Software versions

- When R packages (or R itself) are updated, the developers may change default values or fix bugs.

- This may cause your code to not work anymore.

- Or worse, it could change your results.

## One solution {.scrollable}

One solution is to add the command `sessionInfo()` to all your documents. 

This way, we can record the R version and the version of all the packages that we have loaded in our session.

```{r}
sessionInfo()
```

## A better solution

- Create and share a "virtual machine" that contains all the software needed to reproduce your analysis.

- This _container_ will have the exact same versions of all the software that you need and will guarantee that whoever runs it will get the exact results that you had.

- Popular software to achieve this are **Docker** and **Singularity**.

## Learn Docker and Singularity

A good R-centric first intro to Docker and singularity is provided by the Bioconductor project [here](https://bioconductor.org/help/docker/).

